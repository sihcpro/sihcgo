package treeword

import(
	"fmt"
	"time"
	"github.com/sihcgo/search"
)

type TreeWord struct {
	Char     byte
	Amount   int
	NextChar []byte
	NextTree map[byte]*TreeWord
}

func New() *TreeWord {
	tmp := new(TreeWord)
	tmp.Char = 0
	tmp.Amount = 0
	tmp.NextChar = make([]byte, 0)
	tmp.NextTree = make(map[byte]*TreeWord)
	return tmp
}

func Init(char byte) *TreeWord {
	tmp := new(TreeWord)
	tmp.Char = char
	tmp.Amount = 0
	tmp.NextChar = make([]byte, 0)
	tmp.NextTree = make(map[byte]*TreeWord)
	return tmp
}

func Construct(b byte, a int, nl []byte, nc map[byte]*TreeWord) *TreeWord {
	tmp := new(TreeWord)
	tmp.Char = b
	tmp.Amount = a
	tmp.NextChar = nl
	tmp.NextTree = nc
	// fmt.Println("Test")
	// tmp.NextTree['a'] = New()
	// fmt.Println("Test pasted")
	return tmp
}

func (this *TreeWord) append(char byte, pos... int) {
	// fmt.Print(" [", string(this.NextChar), "]")
	if len(pos) > 0 {
		p := pos[0]+1
		// fmt.Print(" [", string(this.NextChar[:p]), "]")
		tree := Init(char)

		tmpNextChar := append([]byte{char},      this.NextChar[p:]...)
		// tmpNextTree := append(map[byte]*TreeWord{tree}, this.NextTree[p:]...)
		if p-1 < len(this.NextChar) {
			this.NextChar = append(this.NextChar[:p], tmpNextChar...)
			// this.NextTree = append(this.NextTree[:p], tmpNextTree...)
			this.NextTree[char] = tree
		}
	} else {
		tree := Init(char)

		this.NextChar = append([]byte{char},      this.NextChar...)
		// this.NextTree = append(map[byte]*TreeWord{tree}, this.NextTree...)
		this.NextTree[char] = tree
	}
	// fmt.Print(" -> [", string(this.NextChar), "] ")
}

func (this *TreeWord) Insert(s string) int {
	if len(s) == 0 {
		this.Amount++
		return this.Amount
	}
	char := s[0]
	// fmt.Println(this.NextChar, char)
	tmp := search.BinarySearchB(this.NextChar, char)
	// tmp := search.BinarySearchB([]byte{char}, char)
	// tmp = -1
	if tmp == -1 {
		this.append(char)
		return this.NextTree[char].Insert(s[1:])
	} else if this.NextChar[tmp] == char {
		return this.NextTree[this.NextChar[tmp]].Insert(s[1:])
	} else {
		this.append(char, tmp)
		return this.NextTree[this.NextChar[tmp+1]].Insert(s[1:])
	}

	return 0
}

func (this *TreeWord) Inserts(words... string) {
	for _, word := range words {
		this.Insert(word)
	}
}

func (this *TreeWord) print(head, tmp string) {
	st := 0
	tmp2 := tmp + string(this.Char)
	if this.Amount > 0 {
		st = -1
		fmt.Print( " ~~>> ", tmp2, " [", this.Amount, "]")
		fmt.Println()
	}
	for i, c := range this.NextChar {
		if i == st {
			fmt.Print(" ~ ", string(c))
			if len(this.NextChar) == 1 {
				this.NextTree[c].print(head+"    ", tmp2)
			} else {
				this.NextTree[c].print(head+"|   ", tmp2)
			}
		} else {
			fmt.Print(head, "|  ")
			fmt.Println()
			fmt.Print(head, "|~~ ", string(c))
			if i < len(this.NextChar)-1 {
				this.NextTree[c].print(head+"|   ", tmp2)
			} else {
				this.NextTree[c].print(head+"    ", tmp2)
			}
		}
		// fmt.Println("2")
	}
}

func (this *TreeWord) all(arr *[]string, tmp string) {
	tmp2 := tmp+string(this.Char)
	// if this.Amount > 0 {
	// 	*arr = append(*arr, tmp2)
	// }
	for i := 0; i < this.Amount; i++ {
		*arr = append(*arr, tmp2)
	}
	for _, c := range this.NextTree {
		c.all( arr, tmp2)
	}
}

func (this *TreeWord) All() []string {
	arr := new([]string)
	fmt.Printf("%T\n", new([]string))
	this.all(arr, "")
	return *arr
}

func (this *TreeWord) Print() {
	fmt.Print(" ")
	this.print("", "")
}

func (this *TreeWord) helper(s string) {
	this.Insert(s)
	// fmt.Print( " : ", s, " >> ", this.Insert(s))
}

func find(arr *[]string) {

}

func (this *TreeWord) Find(regex string) {

}

func (this *TreeWord) GetTree(char byte) {

}

func main2() {
	startTime := time.Now()
	a := map[byte]int {
		0 : 0,
		// 1 : 1,
		// 3 : 3,
		// 2 : 2,
	}
	b := []int {
		1, 2, 3, 4,
	}
	var s = 0
	// for i:= 0; i < 100000; i++ {
	// 	// for _, k := range a {
	// 	// 	s += k
	// 	// }
	// 	// s+= b[0]
	// 	b = append(b, i)
	// 	b = append(b[0:len(b)/2], b[(len(b)/2):len(b)]...)
	// 	// fmt.Println(len(b))
	// }

	fmt.Println(s, a[0], b[0])

	fmt.Println("---------------------")

	c := New()
	c.helper("angular")
	c.helper("aws")
	c.helper("androi")
	c.helper("atal bihari vajpayee")
	c.helper("aretha franklin")
	c.helper("angularjs")
	c.helper("ariana grande")
	c.helper("amazon")
	c.helper("anime")
	c.helper("apple")
	c.helper("angry bird")
	c.helper("animals")
	c.helper("angel")
	c.helper("anna kendrick")
	c.helper("angelina jolie")
	c.helper("angela lang")
	c.helper("and here we go")
	c.helper("amber rose")
	c.helper("golang")
	c.helper("i love you")
	c.helper("anh Phuc")
	c.helper("anh Phuc")
	c.helper("anh Phuc")
	c.helper("anh Phuc")
	c.helper("anh Phuc")
	c.helper("anh Phuc")
	c.Print()

	fmt.Println("\n~~~ END ~~~", time.Since(startTime))
}

func main() {
	for i:= 0; i < 1; i++ {
		fmt.Println("Test ", i+1)
		main2()
	}
}

